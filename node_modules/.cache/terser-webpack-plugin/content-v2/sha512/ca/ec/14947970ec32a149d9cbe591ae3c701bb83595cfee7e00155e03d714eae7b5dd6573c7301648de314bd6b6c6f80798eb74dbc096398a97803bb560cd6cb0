{"map":"{\"version\":3,\"sources\":[\"/Users/intanpuspitasari/Documents/Github Stuff/About/about/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/Users/intanpuspitasari/Documents/Github Stuff/About/about/src/logo.svg\",\"/Users/intanpuspitasari/Documents/Github Stuff/About/about/src/App.js\",\"/Users/intanpuspitasari/Documents/Github Stuff/About/about/src/serviceWorker.js\",\"/Users/intanpuspitasari/Documents/Github Stuff/About/about/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"react_default\",\"a\",\"createElement\",\"BrowserRouter\",\"App_Dashboard\",\"Component\",\"Dashboard\",\"id\",\"className\",\"NavLink\",\"exact\",\"to\",\"Route\",\"path\",\"component\",\"Home\",\"Marketing\",\"Automation\",\"React\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4MCMlCC,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAD,cAJQC,EAAAA,WAWZC,mLAEA,OACIN,EAAAC,EAAAC,cAAA,MAAA,CAAKK,GAAG,aACJP,EAAAC,EAAAC,cAAA,MAAA,CAAKM,UAAU,QACXR,EAAAC,EAAAC,cAACO,QAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,QAGAX,EAAAC,EAAAC,cAACO,QAAD,CAASC,OAAK,EAACC,GAAG,cAAlB,aAGAX,EAAAC,EAAAC,cAACO,QAAD,CAASC,OAAK,EAACC,GAAG,eAAlB,eAIJX,EAAAC,EAAAC,cAAA,MAAA,CAAKM,UAAU,WACrBR,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,IAAIC,UAAWC,IACjCf,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,aAAaC,UAAWE,IAC1ChB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,cAAcC,UAAWG,aAlB3BC,EAAAA,EAAMb,WA0BxBU,mLAEA,OAAOf,EAAAC,EAAAC,cAAA,KAAA,KAAA,gDAFMgB,EAAAA,EAAMb,WAOnBY,mLAEA,OAAOjB,EAAAC,EAAAC,cAAA,KAAA,KAAA,uCAFYgB,EAAAA,EAAMb,WAOzBW,mLAEA,OAAOhB,EAAAC,EAAAC,cAAA,KAAA,KAAA,sCAFWgB,EAAAA,EAAMb,WAMfN,EAAAA,ECnDKoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React, { Component } from 'react';\\nimport { Route } from 'react-router-dom';\\nimport logo from './logo.svg';\\nimport './App.css';\\nimport { BrowserRouter } from 'react-router-dom';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <BrowserRouter>\\n          <Dashboard />\\n      </BrowserRouter>\\n    );\\n  }\\n}\\n\\n// This is what you really care about\\nclass Dashboard extends React.Component {\\n  render() {\\n      return (\\n          <div id=\\\"dashboard\\\">\\n              <div className=\\\"menu\\\">\\n                  <NavLink exact to=\\\"/\\\">\\n                      Home\\n                  </NavLink>\\n                  <NavLink exact to=\\\"/marketing\\\" >\\n                      Marketing\\n                  </NavLink>\\n                  <NavLink exact to=\\\"/automation\\\">\\n                      Automation\\n                  </NavLink>\\n              </div>\\n              <div className=\\\"content\\\">\\n        <Route exact path=\\\"/\\\" component={Home} />\\n        <Route exact path=\\\"/marketing\\\" component={Marketing} />\\n        <Route exact path=\\\"/automation\\\" component={Automation} />\\n              </div>\\n          </div>\\n      );\\n  }\\n}\\n\\n// This is what you really care about\\nclass Home extends React.Component {\\n  render() {\\n      return <h1>Hello there ! You're on the home page</h1>;\\n  }\\n}\\n\\n// This is what you could care about\\nclass Automation extends React.Component {\\n  render() {\\n      return <h1>This is the Automation Panel</h1>;\\n  }\\n}\\n\\n// This is what you really care about\\nclass Marketing extends React.Component {\\n  render() {\\n      return <h1>This is the Marketing Panel</h1>;\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM, { BrowserRouter } from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,n){e.exports=n(28)},20:function(e,t,n){},22:function(e,t,n){e.exports=n.p+\"static/media/logo.5d5d9eef.svg\"},23:function(e,t,n){},28:function(e,t,n){\"use strict\";n.r(t);var a=n(0),o=n.n(a),c=n(11),r=n.n(c),i=(n(20),n(5)),u=n(6),l=n(8),m=n(7),s=n(9),h=n(30),p=(n(22),n(23),n(29)),b=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(p.a,null,o.a.createElement(j,null))}}]),t}(a.Component),j=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(\"div\",{id:\"dashboard\"},o.a.createElement(\"div\",{className:\"menu\"},o.a.createElement(NavLink,{exact:!0,to:\"/\"},\"Home\"),o.a.createElement(NavLink,{exact:!0,to:\"/marketing\"},\"Marketing\"),o.a.createElement(NavLink,{exact:!0,to:\"/automation\"},\"Automation\")),o.a.createElement(\"div\",{className:\"content\"},o.a.createElement(h.a,{exact:!0,path:\"/\",component:O}),o.a.createElement(h.a,{exact:!0,path:\"/marketing\",component:f}),o.a.createElement(h.a,{exact:!0,path:\"/automation\",component:d})))}}]),t}(o.a.Component),O=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(\"h1\",null,\"Hello there ! You're on the home page\")}}]),t}(o.a.Component),d=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(\"h1\",null,\"This is the Automation Panel\")}}]),t}(o.a.Component),f=function(e){function t(){return Object(i.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(\"h1\",null,\"This is the Marketing Panel\")}}]),t}(o.a.Component),v=b;Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(v,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[14,2,1]]]);","extractedComments":[]}